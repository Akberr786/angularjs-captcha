{"version":3,"sources":["../src/angular1-captcha.js"],"names":["angular","config","$httpProvider","interceptors","push","captchaSettings","configuredSettings","captchaEndpoint","setSettings","settings","$get","extend","captchaEndpointFilter","url","replace","captchaHelper","$window","trim","string","buildUrl","params","p","key","test","join","scriptInclude","className","script","document","createElement","src","captchaHttpInterceptor","request","beforeSend","botdetectCaptchaDirective","$document","$rootScope","$http","$filter","restrict","link","scope","element","attrs","styleName","handlerUrl","bodyElement","scriptIncludeUrl","initScriptIncluded","initScriptIncludeUrl","stylename","captchaStyleName","get","find","method","c","getElementsByClassName","length","append","parentNode","removeChild","then","response","captchaHtmlWithoutScripts","data","html","t","querySelector","value","cs","error","Error","correctCaptchaDirective","Captcha","require","ctrls","captcha","captchaCode","ngModel","$setValidity","bind","val","validate","isHuman","reloadImage","captchaService","BotDetect","this","captchaId","getBotDetectInstance","botdetectInstance","getInstanceByStyleName","prototype","validationUrl","i","module","provider","filter","factory","directive","window"],"mappings":"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","file":"angular1-captcha.min.js","sourcesContent":["/* BotDetect AngularJS CAPTCHA Module */\n\n(function(angular) {\n  'use strict';\n  \n  function config($httpProvider) {\n    $httpProvider.interceptors.push('captchaHttpInterceptor'); \n  }\n  \n  /**\n   * BotDetect Captcha module settings.\n   */\n  function captchaSettings() {\n    var configuredSettings = {},\n        captchaSettings = {\n          captchaEndpoint: ''\n        };\n\n    return {\n      setSettings: function(settings) {\n        configuredSettings = settings;\n      },\n\n      $get: function() {\n        angular.extend(captchaSettings, configuredSettings);\n        return captchaSettings;\n      }\n    };\n  }\n\n  /**\n   * Strip '/' character from the end of the given url.\n   */\n  function captchaEndpointFilter() {\n    return function(url) {\n      return url.replace(/\\/+$/g, '');\n    };\n  }\n  \n  /**\n   * Captcha helper that provides useful functions.\n   */\n  function captchaHelper($window) {\n    return {\n      // strip whitespace from the beginning and end of the given string\n      trim: function(string) {\n        return string.replace(/^\\s+|\\s+$/g, '');\n      },\n\n      // build url with parameters\n      buildUrl: function(url, params) {\n        var p = [];\n\n        for (var key in params) {\n          if (typeof key === 'string') {\n            p.push(key + '=' + params[key]);\n          }\n        }\n\n        var hasParamsPattern = /\\?+/g;\n        return hasParamsPattern.test(url) ? (url + '&' + p.join('&')) : (url + '?' + p.join('&')); \n      },\n\n      // create script include element\n      scriptInclude: function(url, className) {\n        var script = $window.document.createElement('script');\n            script.src = url;\n            script.className = className;\n        return script;\n      }\n    };\n  }\n  \n  /**\n   * Register beforeSend() function for Http request.\n   */\n  function captchaHttpInterceptor() {\n    return {\n      request: function(config) {\n        if (config.beforeSend) {\n          config.beforeSend();\n        }\n        return config;\n      }\n    };\n  }\n  \n  /**\n   * <botdetect-captcha> directive element, which is used to display Captcha html markup.\n   */\n  function botdetectCaptchaDirective($document, $rootScope, $http, $filter, captchaSettings, captchaHelper) {\n    return {\n      restrict: 'E',\n      link: function(scope, element, attrs) {\n        var styleName,\n            handlerUrl,\n            bodyElement,\n            scriptIncludeUrl,\n            initScriptIncluded,\n            initScriptIncludeUrl;\n\n        styleName = !attrs.stylename ? 'defaultCaptcha' : attrs.stylename;\n\n        // save styleName in $rootScope, that will be used in correctCaptcha directive and Captcha service for getting BotDetect instance\n        $rootScope.captchaStyleName = styleName;\n\n        // normalize captcha endpoint path\n        handlerUrl = $filter('captchaEndpointFilter')(captchaHelper.trim(captchaSettings.captchaEndpoint));\n\n        // build BotDetect client-side script include url\n        scriptIncludeUrl = captchaHelper.buildUrl(handlerUrl, {\n          get: 'script-include'\n        });\n\n        // body element\n        bodyElement = $document.find('body')[0];\n\n        $http({\n          method: 'GET',\n          url: handlerUrl,\n          params: {\n            get: 'html',\n            c: styleName\n          },\n          beforeSend: function() {\n            // append BotDetect client-side script to body once\n            if ($document[0].getElementsByClassName('BDC_ScriptInclude').length === 0) {\n              bodyElement.append(captchaHelper.scriptInclude(scriptIncludeUrl, 'BDC_ScriptInclude'));\n            }\n\n            // remove included BotDetect init script if it exists\n            initScriptIncluded = $document[0].getElementsByClassName('BDC_InitScriptInclude');\n            if (initScriptIncluded.length !== 0) {\n              initScriptIncluded[0].parentNode.removeChild(initScriptIncluded[0]);\n            }\n          }\n        })\n          .then(function(response) {\n            // remove all botdetect script includes (script include and init script include)\n            // because angular won't execute them in default.\n            var captchaHtmlWithoutScripts = response.data.replace(/<script.*<\\/script>/g, '');\n            \n            // show captcha html in view\n            element.html(captchaHtmlWithoutScripts);\n\n            // build BotDetect init script include url\n            initScriptIncludeUrl = captchaHelper.buildUrl(handlerUrl, {\n              get: 'init-script-include',\n              c: styleName,\n              t: element[0].querySelector('#BDC_VCID_' + styleName).value,\n              cs: '200'\n            });\n\n            // append BotDetect init script to body\n            bodyElement.append(captchaHelper.scriptInclude(initScriptIncludeUrl, 'BDC_InitScriptInclude'));\n          }, function(error) {\n            throw new Error(error.data);\n          });\n      }\n    };\n  }\n  \n  /**\n   * 'correct-captcha' directive attribute, which is used to perform ui captcha validaion.\n   */\n  function correctCaptchaDirective(Captcha) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs, ctrls) {\n        var captcha,\n            captchaCode,\n            ngModel = ctrls;\n        \n        ngModel.$setValidity('correctCaptcha', false);\n        \n        // client-side validate captcha on blur event\n        element.bind('blur', function() {\n          captchaCode = element.val();\n\n          if (!captchaCode) {\n            return;\n          }\n\n          if (!captcha) {\n            captcha = new Captcha();\n          }\n\n          captcha.validate(captchaCode)\n            .then(function(isHuman) {\n              if (isHuman) {\n                // correct captcha code\n                ngModel.$setValidity('correctCaptcha', true);\n              } else {\n                // incorrect captcha code\n                ngModel.$setValidity('correctCaptcha', false);\n                captcha.reloadImage();\n              }\n            });\n        });\n      }\n    };\n  }\n  \n  /**\n   * Captcha client-side instance exposes Captcha workflow functions and values.\n   */\n  function captchaService($rootScope, $http) {\n    var Captcha = function() {\n      if (typeof BotDetect === 'undefined') {\n        throw new Error('Can not create Captcha instance, please put \"new Captcha()\" inside function that will be invoked after form is submitted.');\n      }\n      \n      this.captchaStyleName = $rootScope.captchaStyleName;\n      this.captchaId = Captcha.getBotDetectInstance().captchaId;\n    };\n    \n    Captcha.botdetectInstance = null;\n    \n    Captcha.getBotDetectInstance = function() {\n      if (!$rootScope.captchaStyleName) {\n        return null;\n      }\n      \n      if (!Captcha.botdetectInstance\n          || (Captcha.botdetectInstance.captchaStyleName !== $rootScope.captchaStyleName)) {\n        Captcha.botdetectInstance = BotDetect.getInstanceByStyleName($rootScope.captchaStyleName);\n      }\n      \n      return Captcha.botdetectInstance;\n    };\n    \n    Captcha.prototype.validate = function(captchaCode) {\n      var promise = $http({\n          method: 'GET',\n          url: Captcha.getBotDetectInstance().validationUrl,\n          params: {\n            i: captchaCode\n          }\n        })\n          .then(function(response) {\n            return response.data;\n          }, function(error) {\n            return error.data;\n          });\n\n      return promise;\n    };\n    \n    Captcha.prototype.reloadImage = function() {\n      Captcha.getBotDetectInstance().reloadImage();\n    };\n\n    return Captcha;\n  }\n\n  angular\n    .module('BotDetectCaptcha', [])\n    .config([\n      '$httpProvider',\n      config\n    ])\n    .provider('captchaSettings', captchaSettings)\n    .filter('captchaEndpointFilter', captchaEndpointFilter)\n    .factory('captchaHelper', [\n      '$window',\n      captchaHelper\n    ])\n    .factory('captchaHttpInterceptor', captchaHttpInterceptor)\n    .factory('Captcha', [\n      '$rootScope',\n      '$http',\n      captchaService\n    ])\n    .directive('botdetectCaptcha', [\n      '$document',\n      '$rootScope',\n      '$http',\n      '$filter',\n      'captchaSettings',\n      'captchaHelper',\n      botdetectCaptchaDirective\n    ])\n    .directive('correctCaptcha', [\n      'Captcha',\n      correctCaptchaDirective\n    ]);\n\n})(window.angular);\n"]}