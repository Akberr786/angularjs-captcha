{"version":3,"sources":["../src/angular1-captcha.js"],"names":["angular","config","$httpProvider","interceptors","push","captchaSettings","configuredSettings","baseUrl","handlerPath","setSettings","settings","$get","extend","captchaBaseUrlFilter","url","replace","captchaHandlerPathFilter","path","canonical","captchaHelper","$window","trim","string","buildUrl","params","p","key","test","join","scriptInclude","className","script","document","createElement","src","captchaHttpInterceptor","request","beforeSend","botdetectCaptchaDirective","$document","$rootScope","$http","$filter","restrict","link","scope","element","attrs","styleName","handlerUrl","bodyElement","scriptIncludeUrl","initScriptInclude","initScriptIncludeUrl","stylename","captchaStyleName","get","find","method","c","getElementsByClassName","length","append","remove","then","response","html","data","t","querySelector","value","error","Error","correctCaptchaDirective","Captcha","require","ctrls","captcha","captchaCode","ngModel","$setValidity","bind","val","validate","isHuman","reloadImage","captchaService","BotDetect","this","captchaId","getBotDetectInstance","bodetectInstance","getInstanceByStyleName","prototype","validationUrl","i","module","provider","filter","factory","directive","window"],"mappings":"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","file":"angular1-captcha.min.js","sourcesContent":["/* BotDetect AngularJS CAPTCHA Module */\n\n(function(angular) {\n  'use strict';\n  \n  function config($httpProvider) {\n    $httpProvider.interceptors.push('captchaHttpInterceptor'); \n  }\n  \n  /**\n   * BotDetect Captcha module settings.\n   */\n  function captchaSettings() {\n    var configuredSettings = {},\n        captchaSettings = {\n          baseUrl: '',\n          handlerPath: ''\n        };\n\n    return {\n      setSettings: function(settings) {\n        configuredSettings = settings;\n      },\n\n      $get: function() {\n        angular.extend(captchaSettings, configuredSettings);\n        return captchaSettings;\n      }\n    };\n  }\n\n  /**\n   * Strip '/' character from the end of the given url.\n   */\n  function captchaBaseUrlFilter() {\n    return function(url) {\n      return url.replace(/\\/+$/g, '');\n    };\n  }\n  \n  /**\n   * Strip '/' from the beginning and end, \n   * then add '/' to the beginning of the given path.\n   */\n  function captchaHandlerPathFilter() {\n    return function(path) {\n      var canonical = path.replace(/^\\/+|\\/+$/g, '');\n          canonical = '/' + canonical;\n        return canonical;\n    };\n  }\n  \n  /**\n   * Captcha helpers that provides useful functions.\n   */\n  function captchaHelper($window) {\n    return {\n      // strip whitespace from the beginning and end of the given string\n      trim: function(string) {\n        return string.replace(/^\\s+|\\s+$/g, '');\n      },\n\n      // build url with parameters\n      buildUrl: function(url, params) {\n        var p = [];\n\n        for (var key in params) {\n          if (typeof key === 'string') {\n            p.push(key + '=' + params[key]);\n          }\n        }\n\n        var hasParamsPattern = /\\?+/g;\n        return hasParamsPattern.test(url) ? (url + '&' + p.join('&')) : (url + '?' + p.join('&')); \n      },\n\n      // create script include element\n      scriptInclude: function(url, className) {\n        var script = $window.document.createElement('script');\n            script.src = url;\n            script.className = className;\n        return script;\n      }\n    };\n  }\n  \n  /**\n   * Register beforeSend() function for Http request.\n   */\n  function captchaHttpInterceptor() {\n    return {\n      request: function(config) {\n        if (config.beforeSend) {\n          config.beforeSend();\n        }\n        return config;\n      }\n    };\n  }\n  \n  /**\n   * <botdetect-captcha> directive element, which is used to display Captcha html markup.\n   */\n  function botdetectCaptchaDirective($document, $rootScope, $http, $filter, captchaSettings, captchaHelper) {\n    return {\n      restrict: 'E',\n      link: function(scope, element, attrs) {\n        var baseUrl,\n            styleName,\n            handlerUrl,\n            bodyElement,\n            handlerPath,\n            scriptIncludeUrl,\n            initScriptInclude,\n            initScriptIncludeUrl,\n\n        styleName = !attrs.stylename ? 'defaultCaptcha' : attrs.stylename;\n\n        // save styleName in $rootScope, that will be used in correctCaptcha directive and Captcha service for getting BotDetect instance\n        $rootScope.captchaStyleName = styleName;\n\n        // normalize base url and handler path\n        baseUrl = $filter('captchaBaseUrlFilter')(captchaHelper.trim(captchaSettings.baseUrl));\n        handlerPath = $filter('captchaHandlerPathFilter')(captchaHelper.trim(captchaSettings.handlerPath));\n\n        // build captcha handler url\n        handlerUrl = baseUrl + handlerPath;\n\n        // build BotDetect client-side script include url\n        scriptIncludeUrl = captchaHelper.buildUrl(handlerUrl, {\n          get: 'script-include'\n        });\n\n        // body element\n        bodyElement = $document.find('body')[0];\n\n        $http({\n          method: 'GET',\n          url: handlerUrl,\n          params: {\n            get: 'html',\n            c: styleName\n          },\n          beforeSend: function() {\n            // append BotDetect client-side script to body once\n            if (0 === $document[0].getElementsByClassName('BDC_ScriptInclude').length) {\n              bodyElement.append(captchaHelper.scriptInclude(scriptIncludeUrl, 'BDC_ScriptInclude'));\n            }\n\n            // remove included BotDetect init script if it exists\n            initScriptInclude = $document[0].getElementsByClassName('BDC_InitScriptInclude');\n            if (0 !== initScriptInclude.length) {\n              initScriptInclude[0].remove();\n            }\n          }\n        })\n          .then(function(response) {\n            // show captcha html\n            element.html(response.data);\n\n            // remove all botdetect script includes (script include and init script include)\n            // since angular doesn't execute script in default \n            element.find('script').remove();\n\n            // build BotDetect init script include url\n            initScriptIncludeUrl = captchaHelper.buildUrl(handlerUrl, {\n              get: 'init-script-include',\n              c: styleName,\n              t: element[0].querySelector('#BDC_VCID_' + styleName).value\n            });\n\n            // append BotDetect init script to body\n            bodyElement.append(captchaHelper.scriptInclude(initScriptIncludeUrl, 'BDC_InitScriptInclude'));\n          }, function(error) {\n            throw new Error(error.data);\n          });\n      }\n    };\n  }\n  \n  /**\n   * 'correct-captcha' directive attribute, which is used to perform ui captcha validaion.\n   */\n  function correctCaptchaDirective(Captcha) {\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function(scope, element, attrs, ctrls) {\n        var captcha,\n            captchaCode,\n            ngModel = ctrls;\n        \n        ngModel.$setValidity('correctCaptcha', false);\n        \n        // client-side validate captcha on blur event\n        element.bind('blur', function() {\n          captchaCode = element.val();\n\n          if (!captchaCode) {\n            return;\n          }\n\n          if (!captcha) {\n            captcha = new Captcha();\n          }\n\n          captcha.validate(captchaCode)\n            .then(function(isHuman) {\n              if (isHuman) {\n                // correct captcha code\n                ngModel.$setValidity('correctCaptcha', true);\n              } else {\n                // incorrect captcha code\n                ngModel.$setValidity('correctCaptcha', false);\n                captcha.reloadImage();\n              }\n            });\n        });\n      }\n    };\n  }\n  \n  /**\n   * Captcha client-side instance exposes Captcha workflow functions and values.\n   */\n  function captchaService($rootScope, $http) {\n    var Captcha = function() {\n      if (typeof BotDetect === 'undefined') {\n        throw new Error('Can not create Captcha instance, please put \"new Captcha()\" inside function that will be invoked after form is submitted.');\n      }\n      \n\t\t\tthis.captchaStyleName = $rootScope.captchaStyleName;\n      this.captchaId = Captcha.getBotDetectInstance().captchaId;\n    };\n    \n    Captcha.bodetectInstance = null;\n    \n    Captcha.getBotDetectInstance = function() {\n      if (!$rootScope.captchaStyleName) {\n        return null;\n      }\n      \n      if (!Captcha.bodetectInstance\n          || (Captcha.bodetectInstance.captchaStyleName !== $rootScope.captchaStyleName)) {\n        Captcha.bodetectInstance = BotDetect.getInstanceByStyleName($rootScope.captchaStyleName);\n      }\n      \n      return Captcha.bodetectInstance;\n    };\n    \n    Captcha.prototype.validate = function(captchaCode) {\n      var promise = $http({\n          method: 'GET',\n          url: Captcha.getBotDetectInstance().validationUrl,\n          params: {\n            i: captchaCode\n          }\n        })\n          .then(function(response) {\n            return response.data;\n          }, function(error) {\n            return error.data;\n          });\n\n      return promise;\n    };\n    \n    Captcha.prototype.reloadImage = function() {\n      Captcha.getBotDetectInstance().reloadImage();\n    };\n\n    return Captcha;\n  }\n\n  angular\n    .module('BotDetectCaptcha', [])\n    .config([\n      '$httpProvider',\n      config\n    ])\n    .provider('captchaSettings', captchaSettings)\n    .filter('captchaBaseUrlFilter', captchaBaseUrlFilter)\n    .filter('captchaHandlerPathFilter', captchaHandlerPathFilter)\n    .factory('captchaHelper', [\n      '$window',\n      captchaHelper\n    ])\n    .factory('captchaHttpInterceptor', captchaHttpInterceptor)\n    .factory('Captcha', [\n      '$rootScope',\n      '$http',\n      captchaService\n    ])\n    .directive('botdetectCaptcha', [\n      '$document',\n      '$rootScope',\n      '$http',\n      '$filter',\n      'captchaSettings',\n      'captchaHelper',\n      botdetectCaptchaDirective\n    ])\n    .directive('correctCaptcha', [\n      'Captcha',\n      correctCaptchaDirective\n    ]);\n\n})(window.angular);\n"]}