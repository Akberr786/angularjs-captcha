{"version":3,"sources":["../src/angularjs-captcha.js"],"names":["angular","captchaSettings","configuredSettings","captchaEndpoint","setSettings","settings","$get","extend","captchaEndpointFilter","url","replace","captchaHelper","$window","trim","string","buildUrl","params","p","key","push","test","join","scriptInclude","className","onLoadedCallback","script","document","createElement","src","readyState","onreadystatechange","onload","getBaseUrl","captchaHtml","baseUrl","matched","match","botdetectCaptchaDirective","$document","$rootScope","$http","$filter","restrict","link","scope","element","attrs","styleName","stylename","captchaStyleName","bodyElement","find","addScriptToBody","callback","getElementsByClassName","length","scriptIncludeUrl","get","append","addInitScriptToBody","initScriptIncluded","parentNode","removeChild","initScriptIncludeUrl","c","t","querySelector","value","cs","method","then","response","data","displayHtml","html","isBDScriptIncludeLoaded","error","Error","correctCaptchaDirective","Captcha","require","ctrls","captcha","captchaCode","ngModel","$setValidity","bind","val","validate","isHuman","reloadImage","captchaService","BotDetect","this","captchaId","getBotDetectInstance","getInstanceByStyleName","prototype","validationUrl","i","module","provider","filter","factory","directive","window"],"mappings":"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","file":"angularjs-captcha.min.js","sourcesContent":["/* BotDetect AngularJS CAPTCHA Module */\r\n\r\n(function(angular) {\r\n  'use strict';\r\n\r\n  /**\r\n   * BotDetect Captcha module settings.\r\n   */\r\n  function captchaSettings() {\r\n    var configuredSettings = {},\r\n        captchaSettings = {\r\n          captchaEndpoint: ''\r\n        };\r\n\r\n    return {\r\n      setSettings: function(settings) {\r\n        configuredSettings = settings;\r\n      },\r\n\r\n      $get: function() {\r\n        angular.extend(captchaSettings, configuredSettings);\r\n        return captchaSettings;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Strip '/' character from the end of the given url.\r\n   */\r\n  function captchaEndpointFilter() {\r\n    return function(url) {\r\n      return url.replace(/\\/+$/g, '');\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Captcha helper that provides useful functions.\r\n   */\r\n  function captchaHelper($window) {\r\n    return {\r\n      // strip whitespace from the beginning and end of the given string\r\n      trim: function(string) {\r\n        return string.replace(/^\\s+|\\s+$/g, '');\r\n      },\r\n\r\n      // build url with parameters\r\n      buildUrl: function(url, params) {\r\n        var p = [];\r\n\r\n        for (var key in params) {\r\n          if (typeof key === 'string') {\r\n            p.push(key + '=' + params[key]);\r\n          }\r\n        }\r\n\r\n        var hasParamsPattern = /\\?+/g;\r\n        return hasParamsPattern.test(url) ? (url + '&' + p.join('&')) : (url + '?' + p.join('&'));\r\n      },\r\n\r\n      // create script include element\r\n      scriptInclude: function(url, className, onLoadedCallback) {\r\n        var script = $window.document.createElement('script');\r\n            script.src = url;\r\n            script.className = className;\r\n            \r\n        if (script.readyState) { // for IE\r\n          script.onreadystatechange = function() {\r\n            if ((script.readyState === 'loaded') \r\n                  || (script.readyState === 'complete')) {\r\n              if (typeof onLoadedCallback === 'function') {\r\n                onLoadedCallback();\r\n              }\r\n            }\r\n          };\r\n        } else {\r\n          script.onload = function() {\r\n            if (typeof onLoadedCallback === 'function') {\r\n              onLoadedCallback();\r\n            }\r\n          };\r\n        }\r\n        \r\n        return script;\r\n      },\r\n\r\n      // get configured base url in captcha html\r\n      getBaseUrl: function(captchaHtml) {\r\n        var baseUrl = '';\r\n        var matched = captchaHtml.match(/id=['\"]BDC_BaseUrl['\"].*value=['\"]([^'\"]+)/);\r\n        if (matched) {\r\n          baseUrl = matched[1];\r\n        }\r\n        return baseUrl;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * <botdetect-captcha> directive element, which is used to display Captcha html markup.\r\n   */\r\n  function botdetectCaptchaDirective($document, $rootScope, $http, $filter, captchaSettings, captchaHelper) {\r\n    return {\r\n      restrict: 'E',\r\n      link: function(scope, element, attrs) {\r\n        var styleName = attrs.stylename ? attrs.stylename : 'defaultCaptcha';\r\n\r\n        // save styleName in $rootScope, that will be used in correctCaptcha directive and Captcha service for getting BotDetect instance\r\n        $rootScope.captchaStyleName = styleName;\r\n\r\n        // normalize captcha endpoint path\r\n        var captchaEndpoint = $filter('captchaEndpointFilter')(captchaHelper.trim(captchaSettings.captchaEndpoint));\r\n\r\n        // body element\r\n        var bodyElement = $document.find('body')[0];\r\n        \r\n        var addScriptToBody = function(baseUrl, callback) {\r\n          if ($document[0].getElementsByClassName('BDC_ScriptInclude').length !== 0) {\r\n            // BotDetect client-side script is already added\r\n            return;\r\n          }\r\n          \r\n          // build BotDetect client-side script include url\r\n          var scriptIncludeUrl = captchaHelper.buildUrl(baseUrl + captchaEndpoint, {\r\n            get: 'script-include'\r\n          });\r\n          \r\n          angular.element(bodyElement).append(captchaHelper.scriptInclude(scriptIncludeUrl, 'BDC_ScriptInclude', callback));\r\n        };\r\n        \r\n        var addInitScriptToBody = function(baseUrl) {\r\n          // remove included BotDetect init script if it exists\r\n          var initScriptIncluded = $document[0].getElementsByClassName('BDC_InitScriptInclude');\r\n          if (initScriptIncluded.length !== 0) {\r\n            initScriptIncluded[0].parentNode.removeChild(initScriptIncluded[0]);\r\n          }\r\n          \r\n          // build BotDetect init script include url\r\n          var initScriptIncludeUrl = captchaHelper.buildUrl(baseUrl + captchaEndpoint, {\r\n            get: 'init-script-include',\r\n            c: styleName,\r\n            t: element[0].querySelector('#BDC_VCID_' + styleName).value,\r\n            cs: '200'\r\n          });\r\n\r\n          // append BotDetect init script to body\r\n          angular.element(bodyElement).append(captchaHelper.scriptInclude(initScriptIncludeUrl, 'BDC_InitScriptInclude'));\r\n        };\r\n\r\n        $http({\r\n          method: 'GET',\r\n          url: captchaEndpoint,\r\n          params: {\r\n            get: 'html',\r\n            c: styleName\r\n          }\r\n        })\r\n          .then(function(response) {\r\n            var captchaHtml = response.data;\r\n            var baseUrl = captchaHelper.getBaseUrl(captchaHtml);\r\n            \r\n            var displayHtml = function() {\r\n              element.html(response.data.replace(/<script.*<\\/script>/g, ''));\r\n              addInitScriptToBody(baseUrl);\r\n            };\r\n            \r\n            if ($rootScope.isBDScriptIncludeLoaded) {\r\n              displayHtml();\r\n            } else {\r\n              var callback = function() {\r\n                displayHtml();\r\n                $rootScope.isBDScriptIncludeLoaded = true;\r\n              };\r\n              addScriptToBody(baseUrl, callback);\r\n            }\r\n          }, function(error) {\r\n            throw new Error(error.data);\r\n          });\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * 'correct-captcha' directive attribute, which is used to perform ui captcha validaion.\r\n   */\r\n  function correctCaptchaDirective(Captcha) {\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, element, attrs, ctrls) {\r\n        var captcha,\r\n            captchaCode,\r\n            ngModel = ctrls;\r\n\r\n        ngModel.$setValidity('incorrectCaptcha', false);\r\n\r\n        // client-side validate captcha on blur event\r\n        element.bind('blur', function() {\r\n          captchaCode = element.val();\r\n\r\n          if (!captchaCode) {\r\n            return;\r\n          }\r\n\r\n          if (!captcha) {\r\n            captcha = new Captcha();\r\n          }\r\n\r\n          captcha.validate(captchaCode)\r\n            .then(function(isHuman) {\r\n              if (isHuman) {\r\n                // correct captcha code\r\n                ngModel.$setValidity('incorrectCaptcha', true);\r\n              } else {\r\n                // incorrect captcha code\r\n                ngModel.$setValidity('incorrectCaptcha', false);\r\n                captcha.reloadImage();\r\n              }\r\n            });\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Captcha client-side instance exposes Captcha workflow functions and values.\r\n   */\r\n  function captchaService($rootScope, $http) {\r\n    var Captcha = function() {\r\n      if (typeof BotDetect === 'undefined') {\r\n        throw new Error('Can not create Captcha instance, please put \"new Captcha()\" inside function that will be invoked after form is submitted.');\r\n      }\r\n\r\n      this.captchaStyleName = $rootScope.captchaStyleName;\r\n      this.captchaId = Captcha.getBotDetectInstance().captchaId;\r\n    };\r\n\r\n    Captcha.getBotDetectInstance = function() {\r\n      if (!$rootScope.captchaStyleName) {\r\n        return null;\r\n      }\r\n      return BotDetect.getInstanceByStyleName($rootScope.captchaStyleName);\r\n    };\r\n\r\n    Captcha.prototype.validate = function(captchaCode) {\r\n      var promise = $http({\r\n          method: 'GET',\r\n          url: Captcha.getBotDetectInstance().validationUrl,\r\n          params: {\r\n            i: captchaCode\r\n          }\r\n        })\r\n          .then(function(response) {\r\n            return response.data;\r\n          }, function(error) {\r\n            return error.data;\r\n          });\r\n\r\n      return promise;\r\n    };\r\n\r\n    Captcha.prototype.reloadImage = function() {\r\n      Captcha.getBotDetectInstance().reloadImage();\r\n    };\r\n\r\n    return Captcha;\r\n  }\r\n\r\n  angular\r\n    .module('BotDetectCaptcha', [])\r\n    .provider('captchaSettings', captchaSettings)\r\n    .filter('captchaEndpointFilter', captchaEndpointFilter)\r\n    .factory('captchaHelper', [\r\n      '$window',\r\n      captchaHelper\r\n    ])\r\n    .factory('Captcha', [\r\n      '$rootScope',\r\n      '$http',\r\n      captchaService\r\n    ])\r\n    .directive('botdetectCaptcha', [\r\n      '$document',\r\n      '$rootScope',\r\n      '$http',\r\n      '$filter',\r\n      'captchaSettings',\r\n      'captchaHelper',\r\n      botdetectCaptchaDirective\r\n    ])\r\n    .directive('correctCaptcha', [\r\n      'Captcha',\r\n      correctCaptchaDirective\r\n    ]);\r\n\r\n})(window.angular);\r\n"]}