{"version":3,"sources":["../src/angularjs-captcha.js"],"names":["angular","config","$httpProvider","interceptors","push","captchaSettings","configuredSettings","captchaEndpoint","setSettings","settings","$get","extend","captchaEndpointFilter","url","replace","captchaHelper","$window","trim","string","buildUrl","params","p","key","test","join","scriptInclude","className","script","document","createElement","src","captchaHttpInterceptor","request","beforeSend","botdetectCaptchaDirective","$document","$rootScope","$http","$filter","restrict","link","scope","element","attrs","styleName","handlerUrl","bodyElement","scriptIncludeUrl","initScriptIncluded","initScriptIncludeUrl","stylename","captchaStyleName","get","find","method","c","getElementsByClassName","length","append","parentNode","removeChild","then","response","captchaHtmlWithoutScripts","data","html","t","querySelector","value","cs","error","Error","correctCaptchaDirective","Captcha","require","ctrls","captcha","captchaCode","ngModel","$setValidity","bind","val","validate","isHuman","reloadImage","captchaService","BotDetect","this","captchaId","getBotDetectInstance","getInstanceByStyleName","prototype","validationUrl","i","module","provider","filter","factory","directive","window"],"mappings":"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","file":"angularjs-captcha.min.js","sourcesContent":["/* BotDetect AngularJS CAPTCHA Module */\r\n\r\n(function(angular) {\r\n  'use strict';\r\n  \r\n  function config($httpProvider) {\r\n    $httpProvider.interceptors.push('captchaHttpInterceptor'); \r\n  }\r\n  \r\n  /**\r\n   * BotDetect Captcha module settings.\r\n   */\r\n  function captchaSettings() {\r\n    var configuredSettings = {},\r\n        captchaSettings = {\r\n          captchaEndpoint: ''\r\n        };\r\n\r\n    return {\r\n      setSettings: function(settings) {\r\n        configuredSettings = settings;\r\n      },\r\n\r\n      $get: function() {\r\n        angular.extend(captchaSettings, configuredSettings);\r\n        return captchaSettings;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Strip '/' character from the end of the given url.\r\n   */\r\n  function captchaEndpointFilter() {\r\n    return function(url) {\r\n      return url.replace(/\\/+$/g, '');\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Captcha helper that provides useful functions.\r\n   */\r\n  function captchaHelper($window) {\r\n    return {\r\n      // strip whitespace from the beginning and end of the given string\r\n      trim: function(string) {\r\n        return string.replace(/^\\s+|\\s+$/g, '');\r\n      },\r\n\r\n      // build url with parameters\r\n      buildUrl: function(url, params) {\r\n        var p = [];\r\n\r\n        for (var key in params) {\r\n          if (typeof key === 'string') {\r\n            p.push(key + '=' + params[key]);\r\n          }\r\n        }\r\n\r\n        var hasParamsPattern = /\\?+/g;\r\n        return hasParamsPattern.test(url) ? (url + '&' + p.join('&')) : (url + '?' + p.join('&')); \r\n      },\r\n\r\n      // create script include element\r\n      scriptInclude: function(url, className) {\r\n        var script = $window.document.createElement('script');\r\n            script.src = url;\r\n            script.className = className;\r\n        return script;\r\n      }\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Register beforeSend() function for Http request.\r\n   */\r\n  function captchaHttpInterceptor() {\r\n    return {\r\n      request: function(config) {\r\n        if (config.beforeSend) {\r\n          config.beforeSend();\r\n        }\r\n        return config;\r\n      }\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * <botdetect-captcha> directive element, which is used to display Captcha html markup.\r\n   */\r\n  function botdetectCaptchaDirective($document, $rootScope, $http, $filter, captchaSettings, captchaHelper) {\r\n    return {\r\n      restrict: 'E',\r\n      link: function(scope, element, attrs) {\r\n        var styleName,\r\n            handlerUrl,\r\n            bodyElement,\r\n            scriptIncludeUrl,\r\n            initScriptIncluded,\r\n            initScriptIncludeUrl;\r\n\r\n        styleName = attrs.stylename ? attrs.stylename : 'defaultCaptcha';\r\n\r\n        // save styleName in $rootScope, that will be used in correctCaptcha directive and Captcha service for getting BotDetect instance\r\n        $rootScope.captchaStyleName = styleName;\r\n\r\n        // normalize captcha endpoint path\r\n        handlerUrl = $filter('captchaEndpointFilter')(captchaHelper.trim(captchaSettings.captchaEndpoint));\r\n\r\n        // build BotDetect client-side script include url\r\n        scriptIncludeUrl = captchaHelper.buildUrl(handlerUrl, {\r\n          get: 'script-include'\r\n        });\r\n\r\n        // body element\r\n        bodyElement = $document.find('body')[0];\r\n\r\n        $http({\r\n          method: 'GET',\r\n          url: handlerUrl,\r\n          params: {\r\n            get: 'html',\r\n            c: styleName\r\n          },\r\n          beforeSend: function() {\r\n            // append BotDetect client-side script to body once\r\n            if ($document[0].getElementsByClassName('BDC_ScriptInclude').length === 0) {\r\n              bodyElement.append(captchaHelper.scriptInclude(scriptIncludeUrl, 'BDC_ScriptInclude'));\r\n            }\r\n\r\n            // remove included BotDetect init script if it exists\r\n            initScriptIncluded = $document[0].getElementsByClassName('BDC_InitScriptInclude');\r\n            if (initScriptIncluded.length !== 0) {\r\n              initScriptIncluded[0].parentNode.removeChild(initScriptIncluded[0]);\r\n            }\r\n          }\r\n        })\r\n          .then(function(response) {\r\n            // remove all botdetect script includes (script include and init script include)\r\n            // because angular won't execute them in default.\r\n            var captchaHtmlWithoutScripts = response.data.replace(/<script.*<\\/script>/g, '');\r\n            \r\n            // show captcha html in view\r\n            element.html(captchaHtmlWithoutScripts);\r\n\r\n            // build BotDetect init script include url\r\n            initScriptIncludeUrl = captchaHelper.buildUrl(handlerUrl, {\r\n              get: 'init-script-include',\r\n              c: styleName,\r\n              t: element[0].querySelector('#BDC_VCID_' + styleName).value,\r\n              cs: '200'\r\n            });\r\n\r\n            // append BotDetect init script to body\r\n            bodyElement.append(captchaHelper.scriptInclude(initScriptIncludeUrl, 'BDC_InitScriptInclude'));\r\n          }, function(error) {\r\n            throw new Error(error.data);\r\n          });\r\n      }\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * 'correct-captcha' directive attribute, which is used to perform ui captcha validaion.\r\n   */\r\n  function correctCaptchaDirective(Captcha) {\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, element, attrs, ctrls) {\r\n        var captcha,\r\n            captchaCode,\r\n            ngModel = ctrls;\r\n        \r\n        ngModel.$setValidity('correctCaptcha', false);\r\n        \r\n        // client-side validate captcha on blur event\r\n        element.bind('blur', function() {\r\n          captchaCode = element.val();\r\n\r\n          if (!captchaCode) {\r\n            return;\r\n          }\r\n\r\n          if (!captcha) {\r\n            captcha = new Captcha();\r\n          }\r\n\r\n          captcha.validate(captchaCode)\r\n            .then(function(isHuman) {\r\n              if (isHuman) {\r\n                // correct captcha code\r\n                ngModel.$setValidity('correctCaptcha', true);\r\n              } else {\r\n                // incorrect captcha code\r\n                ngModel.$setValidity('correctCaptcha', false);\r\n                captcha.reloadImage();\r\n              }\r\n            });\r\n        });\r\n      }\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Captcha client-side instance exposes Captcha workflow functions and values.\r\n   */\r\n  function captchaService($rootScope, $http) {\r\n    var Captcha = function() {\r\n      if (typeof BotDetect === 'undefined') {\r\n        throw new Error('Can not create Captcha instance, please put \"new Captcha()\" inside function that will be invoked after form is submitted.');\r\n      }\r\n      \r\n      this.captchaStyleName = $rootScope.captchaStyleName;\r\n      this.captchaId = Captcha.getBotDetectInstance().captchaId;\r\n    };\r\n    \r\n    Captcha.getBotDetectInstance = function() {\r\n      if (!$rootScope.captchaStyleName) {\r\n        return null;\r\n      }\r\n      return BotDetect.getInstanceByStyleName($rootScope.captchaStyleName);\r\n    };\r\n    \r\n    Captcha.prototype.validate = function(captchaCode) {\r\n      var promise = $http({\r\n          method: 'GET',\r\n          url: Captcha.getBotDetectInstance().validationUrl,\r\n          params: {\r\n            i: captchaCode\r\n          }\r\n        })\r\n          .then(function(response) {\r\n            return response.data;\r\n          }, function(error) {\r\n            return error.data;\r\n          });\r\n\r\n      return promise;\r\n    };\r\n    \r\n    Captcha.prototype.reloadImage = function() {\r\n      Captcha.getBotDetectInstance().reloadImage();\r\n    };\r\n\r\n    return Captcha;\r\n  }\r\n\r\n  angular\r\n    .module('BotDetectCaptcha', [])\r\n    .config([\r\n      '$httpProvider',\r\n      config\r\n    ])\r\n    .provider('captchaSettings', captchaSettings)\r\n    .filter('captchaEndpointFilter', captchaEndpointFilter)\r\n    .factory('captchaHelper', [\r\n      '$window',\r\n      captchaHelper\r\n    ])\r\n    .factory('captchaHttpInterceptor', captchaHttpInterceptor)\r\n    .factory('Captcha', [\r\n      '$rootScope',\r\n      '$http',\r\n      captchaService\r\n    ])\r\n    .directive('botdetectCaptcha', [\r\n      '$document',\r\n      '$rootScope',\r\n      '$http',\r\n      '$filter',\r\n      'captchaSettings',\r\n      'captchaHelper',\r\n      botdetectCaptchaDirective\r\n    ])\r\n    .directive('correctCaptcha', [\r\n      'Captcha',\r\n      correctCaptchaDirective\r\n    ]);\r\n\r\n})(window.angular);\r\n"]}