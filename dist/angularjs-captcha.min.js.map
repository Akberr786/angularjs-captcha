{"version":3,"sources":["../src/angularjs-captcha.js"],"names":["angular","captchaSettings","configuredSettings","captchaEndpoint","captchaEnabled","setSettings","settings","$get","extend","replace","captchaHelper","$http","$rootScope","getScript","url","method","then","response","Function","data","error","Error","loadScriptIncludes","element","captchaId","querySelector","captchaStyleName","value","scriptIncludeUrl","this","useUserInputBlurValidation","userInput","getAttribute","validateUnsafe","captchaInstance","callback","captchaCode","length","validationUrl","params","i","isHuman","getHtml","styleName","get","c","botdetectCaptchaDirective","restrict","link","scope","attrs","captchastylename","stylename","captchaHtml","html","correctCaptchaDirective","Captcha","require","ctrls","captcha","ngModel","$setValidity","bind","val","reloadImage","captchaService","$document","undefined","window","botdetect","instance","getInstance","getInstanceByStyleName","prototype","getCaptchaId","getUserEnteredCaptchaCode","self","generateCaptchaMarkup","placeholder","getElementsByTagName","innerHTML","module","provider","factory","directive"],"mappings":"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","file":"angularjs-captcha.min.js","sourcesContent":["/* BotDetect CAPTCHA AngularJS Module */\r\n\r\n(function(angular) {\r\n  'use strict';\r\n\r\n  // BotDetect Captcha module settings.\r\n  function captchaSettings() {\r\n    var configuredSettings = {},\r\n        captchaSettings = { \r\n          captchaEndpoint: '',\r\n          captchaEnabled: true\r\n        };\r\n\r\n    return {\r\n      setSettings: function(settings) {\r\n        configuredSettings = settings;\r\n      },\r\n\r\n      $get: function() {\r\n        angular.extend(captchaSettings, configuredSettings);\r\n        // normalize captcha endpoint path\r\n        captchaSettings.captchaEndpoint = captchaSettings.captchaEndpoint.replace(/\\/+$/g, '');\r\n        return captchaSettings;\r\n      }\r\n    };\r\n  }\r\n\r\n  // Captcha helper that provides useful functions.\r\n  function captchaHelper($http, $rootScope, captchaSettings) {\r\n    return {\r\n      getScript: function(url) {\r\n        $http({\r\n          method: 'GET',\r\n          url: url\r\n        })\r\n          .then(function(response) {\r\n            var f = new Function(response.data); f();\r\n          }, function(error) {\r\n            throw new Error(error.data);\r\n          });\r\n      },\r\n      \r\n      loadScriptIncludes: function(element) {\r\n        var captchaId = element.querySelector('#BDC_VCID_' + $rootScope.captchaStyleName).value;\r\n        var scriptIncludeUrl = captchaSettings.captchaEndpoint + '?get=script-include&c=' + $rootScope.captchaStyleName + '&t=' + captchaId + '&cs=200';\r\n        this.getScript(scriptIncludeUrl);\r\n      },\r\n\r\n      useUserInputBlurValidation: function(userInput) {\r\n        return (userInput.getAttribute('correct-captcha') !== null);\r\n      },\r\n\r\n      validateUnsafe: function(captchaInstance, callback) {\r\n        var captchaCode = captchaInstance.userInput;\r\n        if (captchaCode.length !== 0) {\r\n          $http({\r\n            method: 'GET',\r\n            url: captchaInstance.validationUrl,\r\n            params: {\r\n              i: captchaCode.value\r\n            }\r\n          })\r\n            .then(function(response) {\r\n              var isHuman = response.data;\r\n              callback(isHuman);\r\n            }, function(error) {\r\n              throw new Error(error.data);\r\n            });\r\n        } else {\r\n          var isHuman = false;\r\n          callback(isHuman);\r\n        }\r\n      },\r\n\r\n      getHtml: function(styleName, callback) {\r\n        $http({\r\n          method: 'GET',\r\n          url: captchaSettings.captchaEndpoint,\r\n          params: {\r\n            get: 'html',\r\n            c: styleName\r\n          }\r\n        })\r\n          .then(function(response) {\r\n            callback(response.data.replace(/<script.*<\\/script>/g, ''));\r\n          }, function(error) {\r\n            throw new Error(error.data);\r\n          });\r\n      }\r\n    };\r\n  }\r\n  \r\n  // <botdetect-captcha> directive element, which is used to display Captcha html markup.\r\n  function botdetectCaptchaDirective($rootScope, captchaSettings, captchaHelper) {\r\n    return {\r\n      restrict: 'E',\r\n      link: function(scope, element, attrs) {\r\n        if (!captchaSettings.captchaEnabled) {\r\n          return;\r\n        }\r\n\r\n        var captchaStyleName = (function() {\r\n          var styleName;\r\n\r\n          styleName = attrs.captchastylename;\r\n          if (styleName) {\r\n            return styleName;\r\n          }\r\n\r\n          // backward compatibility\r\n          styleName = attrs.stylename;\r\n          if (styleName) {\r\n            return styleName;\r\n          }\r\n\r\n          throw new Error('The captchaStyleName attribute is not found or its value is not set.');\r\n        })();\r\n        \r\n        // save captchaStyleName in $rootScope, that will be used in correctCaptcha directive and Captcha service for getting BotDetect instance\r\n        $rootScope.captchaStyleName = captchaStyleName;\r\n\r\n        captchaHelper.getHtml(captchaStyleName, function(captchaHtml) {\r\n          // show captcha html in view\r\n          element.html(captchaHtml);\r\n\r\n          // load botdetect scripts\r\n          captchaHelper.loadScriptIncludes(element[0]);\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  // 'correct-captcha' directive attribute, which is used to perform ui captcha validaion.\r\n  function correctCaptchaDirective(Captcha, captchaHelper) {\r\n    return {\r\n      restrict: 'A',\r\n      require: 'ngModel',\r\n      link: function(scope, element, attrs, ctrls) {\r\n        var captcha,\r\n            captchaCode,\r\n            ngModel = ctrls;\r\n\r\n        ngModel.$setValidity('incorrectCaptcha', false);\r\n\r\n        // client-side validate captcha on blur event\r\n        element.bind('blur', function() {\r\n          captchaCode = element.val();\r\n\r\n          if (captchaCode.length === 0) {\r\n            return;\r\n          }\r\n\r\n          captcha = new Captcha();\r\n\r\n          captchaHelper.validateUnsafe(captcha, function(isHuman) {\r\n            if (isHuman) {\r\n              // correct captcha code\r\n              ngModel.$setValidity('incorrectCaptcha', true);\r\n            } else {\r\n              // incorrect captcha code\r\n              ngModel.$setValidity('incorrectCaptcha', false);\r\n              captcha.reloadImage();\r\n            }\r\n          });\r\n        });\r\n      }\r\n    };\r\n  }\r\n\r\n  // Captcha client-side instance exposes Captcha workflow functions and values.\r\n  function captchaService($document, $rootScope, captchaHelper) {\r\n    var Captcha = function() {\r\n      if (window.botdetect === undefined) {\r\n        throw new Error('Can not create Captcha instance, please put \"new Captcha()\" inside function that will be invoked after form is submitted.');\r\n      }\r\n\r\n      var instance = Captcha.getInstance();\r\n\r\n      this.captchaStyleName = $rootScope.captchaStyleName;\r\n      this.captchaId = instance.captchaId;\r\n      this.userInput = instance.userInput;\r\n      this.validationUrl = instance.validationUrl;\r\n    };\r\n\r\n    Captcha.getInstance = function() {\r\n      return $rootScope.captchaStyleName\r\n        ? window.botdetect.getInstanceByStyleName($rootScope.captchaStyleName)\r\n        : null;\r\n    };\r\n\r\n    Captcha.prototype.getCaptchaId = function() {\r\n      return this.captchaId;\r\n    };\r\n\r\n    Captcha.prototype.getUserEnteredCaptchaCode = function() {\r\n      return this.userInput.value;\r\n    };\r\n\r\n    Captcha.prototype.validateUnsafe = function(callback) {\r\n      var self = this;\r\n      captchaHelper.validateUnsafe(this, function(isHuman) {\r\n        callback(isHuman);\r\n        if (!captchaHelper.useUserInputBlurValidation(self.userInput) && !isHuman) {\r\n          self.reloadImage();\r\n        }\r\n      });\r\n    };\r\n\r\n    Captcha.prototype.reloadImage = function() {\r\n      Captcha.getInstance().reloadImage();\r\n    };\r\n\r\n    Captcha.generateCaptchaMarkup = function(captchaStyleName) {\r\n      // save captchaStyleName in $rootScope, it will be used in Captcha service for getting BotDetect instance\r\n      $rootScope.captchaStyleName = captchaStyleName;\r\n\r\n      captchaHelper.getHtml(captchaStyleName, function(captchaHtml) {\r\n        var placeholder = $document[0].getElementsByTagName('botdetect-captcha');\r\n        if (placeholder.length !== 0) {\r\n          // show captcha html in view\r\n          placeholder[0].innerHTML = captchaHtml;\r\n          \r\n          // load botdetect scripts\r\n          captchaHelper.loadScriptIncludes(placeholder[0]);\r\n        } else {\r\n          throw new Error('<botdetect-captcha> directive element could not be found.');\r\n        }\r\n      });\r\n    };\r\n\r\n    return Captcha;\r\n  }\r\n\r\n  angular\r\n    .module('BotDetectCaptcha', [])\r\n    .provider('captchaSettings', captchaSettings)\r\n    .factory('captchaHelper', [\r\n      '$http',\r\n      '$rootScope',\r\n      'captchaSettings',\r\n      captchaHelper\r\n    ])\r\n    .factory('Captcha', [\r\n      '$document',\r\n      '$rootScope',\r\n      'captchaHelper',\r\n      captchaService\r\n    ])\r\n    .directive('botdetectCaptcha', [\r\n      '$rootScope',\r\n      'captchaSettings',\r\n      'captchaHelper',\r\n      botdetectCaptchaDirective\r\n    ])\r\n    .directive('correctCaptcha', [\r\n      'Captcha',\r\n      'captchaHelper',\r\n      correctCaptchaDirective\r\n    ]);\r\n\r\n})(window.angular);\r\n"]}